<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- ====== Cache 缓存配置====== -->
	
	<!-- 配置EHCache总线 -->
	<bean id = "ehCacheManagerFactory" class= "org.springframework.cache.ehcache.EhCacheManagerFactoryBean" >
	    <property name = "configLocation" value= "classpath:ehcache-ydz.xml" />
	    <property name="shared" value="true"></property>
	</bean>
	
	<!-- 为系统配置缓存对象 -->
	<bean id = "ehcacheCacheManager" class= "org.springframework.cache.ehcache.EhCacheCacheManager">
    	<property name="cacheManager" ref="ehCacheManagerFactory"/>  
	</bean>
	<!-- 引入EHCache注解驱动： -->
<!-- 	<cache:annotation-driven cache-manager ="ehcacheCacheManager" /> -->
	

	<!-- ================ Shiro start ================ -->

	<!-- 項目自定义的Realm -->
	<bean id="shiroRealm" class="com.ydz.interceptor.shiro.ShiroRealm"
		  init-method="setCredentialsMatcher"></bean>

	<!-- 为Shiro配置缓存 -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
	    <property name="cacheManager" ref="ehCacheManagerFactory"/>
	</bean>
	
	
	<!-- 会话 ID 生成器 --> 
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	<!-- 会话 DAO -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activesessioncache"/>
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler2">
	<!-- <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler"> -->
	    <!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   --> 
		<property name="sessionValidationInterval" value="3600000"/> <!-- 单位毫秒 1hour-->
		<property name="sessionManager" ref="sessionManager"/>
	</bean>
	<!-- 会话管理器 -->                
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="259200000"/> <!-- 单位毫秒 3days-->
		<property name="deleteInvalidSessions" value="true"/>  <!-- 删除失效的session -->  
		
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		
		<property name="sessionDAO" ref="sessionDAO"/>
		
    	<property name="sessionIdCookieEnabled" value="true"/>  
		<property name="sessionIdCookie" ref="sessionIdCookie"/>  
	</bean>
	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,  
        当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->  
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
        <constructor-arg name="name" value="ydz.session.id"/>  
	</bean> 
	
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroRealm" />
		<property name="cacheManager" ref="shiroCacheManager"/>
		<property name="sessionManager" ref="sessionManager" />
		 <property name="sessionMode" value="native" />
	</bean>
	
	     <!-- 配置 Bean 后置处理器：会自动调用和Spring整合后各组件的生命周期方法 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- AOP式方法级权限检查  -->
	<!-- 使Shiro的注解起作用，Shiro的注解标识在方法上   --> 
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
        depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>

	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>

	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />

		<!-- 没有登录的用户请求需要登录的页面时自动跳转到登录页面，不是必须的属性，
			不输入地址的话会自动寻找项目web项目的根目录下的”/login.jsp”页面。 -->
		<property name="loginUrl" value="/login.jsp" />

		<!-- 登录成功默认跳转页面，不配置则跳转至”/”。如果登陆前点击的一个需要登录的页面，
			则在登录自动跳转到那个需要登录的页面。不跳转到此。 -->
		<property name="successUrl" value="/frame/main" />

		<!-- 没有权限默认跳转的页面。 -->
		<property name="unauthorizedUrl" value="/login_toLogin" />
		
		<property name="filters">
            <map>
				<!--                 
                <entry key="authc">
                    <bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry> 
                -->
            </map>
        </property> 
        
		<!-- 具体配置需要拦截哪些 URL，以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦击 -->
		<property name="filterChainDefinitions">
			<value>
				/                           = anon
				/index.html                 = anon
				/ordershare/**              = anon
				/mobile/**                  = anon             
				/app/**               	    = anon             
				/wechat/**					= anon
				/picture/**					= anon
				/test/**					= anon
				/wx/**						= anon
				/website/**                 = anon
				/upload/**                  = anon
				/download/**                = anon
				/jump.html					= anon
				/fonts/**                   = anon
				/images/**                  = anon
				/icons/**	                = anon
				/common/**	                = anon
				/example/**	                = anon
				/resources/**	            = anon
				/json/**                    = anon
				/reg/**						= anon
				/tool/**					= anon
				/login/login_login          = anon
				/login.jsp	                = anon
				/register.jsp 				= anon
				/callbackpay/**				= anon
				/invite/**					= anon
				/jh/**						= anon
				/st/**                      = anon
				/promoter/**                = anon
				/**							= authc
			</value>
		</property>
	</bean>
	
	
	<!--
        anon:例子/admins/**=anon 没有参数，表示可以匿名使用。
        authc:例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
        roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，
            例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
        perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
            例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
        rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。
        port：例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，
            serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
        authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
        ssl:例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
        user:例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
        注：anon，authcBasic，auchc，user是认证过滤器，
        perms，roles，ssl，rest，port是授权过滤器
     -->
     
	<!-- ================ Shiro end ================ -->
</beans>
